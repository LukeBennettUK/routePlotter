<!DOCTYPE html>
<html>
	<head>
		<title>Authentication</title>
		<%= csrf_meta_tags %>
		<%= csp_meta_tag %>

		<%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
		<%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>

		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"
   integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
   crossorigin=""/>
	<script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"
   integrity="sha512-GffPMF3RvMeYyc1LWMHtK8EbPv0iNZ8/oTtHPx9/cc2ILxQ+u905qIwdpULaqDkyBKgOaB57QTMg7ztg8Jm2Og=="
   crossorigin=""></script>
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	</head>
	<body>
		<div id="container">
			<div id="user_header">
			<% if current_user %>
				Logged in as <%= current_user.email %>.
				<%# The session_path method expects a user Id here, but it doesn't matter what is passed in in this instance as the controller action we want to call doesn't use the ID parameter %>
				<%# method: "delete" triggers the destroy action %>
				<%= link_to "Log Out", logout_path %> |
				<%= link_to "Home", root_path %>
			<% else %>
				<%= link_to "Sign Up", signup_path %> or
				<%= link_to "Log In", login_path %>
			<% end %>
			</div>

			<%# flash.each do |name, msg| %>
				<%#= content_tag :div, msg, id: "flash_#{name}"%>
			<%# end %>

			<%= yield %>
		</div>

		<script type="text/javascript">
			let routes = {};
			//let markerStart, markerFinish, polygon;
			//let markerStart;
			let markers = {};
			let polygon;
			let lastTripId;
			let specificJourneys = {};
			const mymap = L.map('mapid').setView([61.4977, 23.76136], 14);

			L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
				attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
				maxZoom: 18,
				id: 'mapbox.streets',
				accessToken: 'pk.eyJ1IjoibHVrZWJlbm5ldHR1ayIsImEiOiJjazBjeXVnZ3IwMmJrM2RyemhyOHVhMmFyIn0.Apvo0nJDVhnd9zyp2L2cgQ'
			}).addTo(mymap);

			let promise = $.get("http://data.itsfactory.fi/journeys/api/1/journeys");

			promise.then(
				data => requestSuccess(data),
				error => console.log('error: ', error)
			);

			function requestSuccess(data) {
				const journeys = data.body
				var countToTen = 0;

				function getSpecificJourneys() {
					for (let journey of journeys) {
						var headSignCount = 0;
						for (var headSign of Object.keys(specificJourneys)) {
							if (journey.headSign === headSign) {
								headSignCount++
							}
						}
						if (headSignCount === 0) {
							specificJourneys[journey.headSign] = journey;
							countToTen++
						} 

						if (countToTen === 10) {
							break;
						}
					}
				}

				function addRouteToggleButtons() {
					for (let journey in specificJourneys) {
						$('#routes').append('<p>Start point: ' + specificJourneys[journey].headSign + ' | Days running: ' + specificJourneys[journey].dayTypes + '</p>');
						$('#routes').append('<button onclick="toggleRoute(\'' + specificJourneys[journey].gtfs.tripId + '\')">Toggle</button>');
					}
				}

				getSpecificJourneys();
				addRouteToggleButtons();
			}

			function addRoute(tripId) {
				for (let journey in specificJourneys) {
					if (specificJourneys[journey].gtfs.tripId === tripId) {

						const route = specificJourneys[journey].calls.map(function (call) {
							return call.stopPoint.location.split(',');
						});

						let markerCounter = 0;
						for (let call of specificJourneys[journey].calls) {
							markers['marker_' + markerCounter] = L.marker(call.stopPoint.location.split(',')).addTo(mymap);
							markers['marker_' + markerCounter].bindPopup(
								"<p>Arrival time: " + call.arrivalTime + "</p><p>Departure time: " + call.departureTime + "</p>"
							);

							markerCounter++;
						}

						polygon = L.polyline(route, {color: 'red'}).addTo(mymap);
					}
				}
			}

			function removeRoute() {
				for (let marker in markers) {
					markers[marker].remove();
				}

				markers = {};
				polygon.remove();
			}

			function toggleRoute(tripId) {
				if (!lastTripId) {
					addRoute(tripId);
					lastTripId = tripId;
				} else if (lastTripId !== tripId) {
					removeRoute();
					addRoute(tripId);
					lastTripId = tripId;
				} else {
					removeRoute();
					lastTripId = '';
				}
			}
		</script>
  	</body>
</html>
